diff --git a/base/files/file_util_unittest.cc b/base/files/file_util_unittest.cc
index 16dfcc6..a89e1b3 100644
--- a/base/files/file_util_unittest.cc
+++ b/base/files/file_util_unittest.cc
@@ -4,7 +4,6 @@
 
 #include <stddef.h>
 #include <stdint.h>
-#include <stdio.h>
 
 #include <algorithm>
 #include <fstream>
@@ -26,7 +25,6 @@
 #include "base/files/file_util.h"
 #include "base/files/scoped_file.h"
 #include "base/files/scoped_temp_dir.h"
-#include "base/guid.h"
 #include "base/macros.h"
 #include "base/path_service.h"
 #include "base/strings/string_util.h"
@@ -36,7 +34,6 @@
 #include "base/test/test_file_util.h"
 #include "base/test/test_timeouts.h"
 #include "base/threading/platform_thread.h"
-#include "base/threading/thread.h"
 #include "build/build_config.h"
 #include "testing/gtest/include/gtest/gtest.h"
 #include "testing/multiprocess_func_list.h"
@@ -3640,63 +3637,6 @@
 }
 #endif
 
-// Test that temp files obtained racily are all unique (no interference between
-// threads). Mimics file operations in DoLaunchChildTestProcess() to rule out
-// thread-safety issues @ https://crbug.com/826408#c17.
-TEST(FileUtilMultiThreadedTest, MultiThreadedTempFiles) {
-  constexpr int kNumThreads = 64;
-  constexpr int kNumWritesPerThread = 32;
-
-  std::unique_ptr<Thread> threads[kNumThreads];
-  for (auto& thread : threads) {
-    thread = std::make_unique<Thread>("test worker");
-    thread->Start();
-  }
-
-  // Wait until all threads are started for max parallelism.
-  for (auto& thread : threads)
-    thread->WaitUntilThreadStarted();
-
-  const RepeatingClosure open_write_close_read = BindRepeating([]() {
-    FilePath output_filename;
-    ScopedFILE output_file(CreateAndOpenTemporaryFile(&output_filename));
-    EXPECT_TRUE(output_file);
-
-    const std::string content = GenerateGUID();
-#if defined(OS_WIN)
-    HANDLE handle =
-        reinterpret_cast<HANDLE>(_get_osfhandle(_fileno(output_file.get())));
-    DWORD bytes_written = 0;
-    ::WriteFile(handle, content.c_str(), content.length(), &bytes_written,
-                NULL);
-    EXPECT_EQ(content.length(), bytes_written);
-#else
-    ::write(::fileno(output_file.get()), content.c_str(), content.length());
-#endif
-    ::fflush(output_file.get());
-    output_file.reset();
-
-    std::string output_file_contents;
-    EXPECT_TRUE(ReadFileToString(output_filename, &output_file_contents))
-        << output_filename;
-
-    EXPECT_EQ(content, output_file_contents);
-
-    DeleteFile(output_filename, false);
-  });
-
-  // Post tasks to each thread in a round-robin fashion to ensure as much
-  // parallelism as possible.
-  for (int i = 0; i < kNumWritesPerThread; ++i) {
-    for (auto& thread : threads) {
-      thread->task_runner()->PostTask(FROM_HERE, open_write_close_read);
-    }
-  }
-
-  for (auto& thread : threads)
-    thread->Stop();
-}
-
 #if defined(OS_POSIX) || defined(OS_FUCHSIA)
 
 TEST(ScopedFD, ScopedFDDoesClose) {

--- a/chrome/VERSION	2018-05-25 06:09:25.000000000 -0400
+++ b/chrome/VERSION	2018-05-28 15:36:34.697245382 -0400
@@ -1,4 +1,4 @@
 MAJOR=68
 MINOR=0
 BUILD=3440
-PATCH=0
+PATCH=7
