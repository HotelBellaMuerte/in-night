--- a/chrome/browser/vr/gesture_detector.h	2018-06-01 
11:01:09.000000000 -0400
+++ b/chrome/browser/vr/gesture_detector.h.new	2018-06-01 
17:01:45.448924844 -0400
@@ -5,6 +5,8 @@
 #ifndef CHROME_BROWSER_VR_GESTURE_DETECTOR_H_
 #define CHROME_BROWSER_VR_GESTURE_DETECTOR_H_
 
+#include <memory>
+
 #include "base/macros.h"
 #include "base/time/time.h"
 #include "chrome/browser/vr/vr_export.h"
--- a/content/public/common/content_features.cc
+++ b/content/public/common/content_features.cc
@@ -224,7 +224,7 @@
 
 // Mojo-based Session Storage.
 const base::Feature kMojoSessionStorage{"MojoSessionStorage",
-                                        base::FEATURE_ENABLED_BY_DEFAULT};
+                                        base::FEATURE_DISABLED_BY_DEFAULT};
 
 // Enables/disables the video capture service.
 const base::Feature kMojoVideoCapture {

diff --git a/third_party/blink/renderer/core/layout/svg/layout_svg_foreign_object.cc b/third_party/blink/renderer/core/layout/svg/layout_svg_foreign_object.cc
index 3656318..65370a2 100644
--- a/third_party/blink/renderer/core/layout/svg/layout_svg_foreign_object.cc
+++ b/third_party/blink/renderer/core/layout/svg/layout_svg_foreign_object.cc
@@ -133,10 +133,13 @@
     return false;
 
   FloatPoint local_point = local_transform.Inverse().MapPoint(point_in_parent);
-
   if (RuntimeEnabledFeatures::SlimmingPaintV175Enabled()) {
+    LayoutPoint point_in_foreign_object(local_point);
+    // |local_point| already includes the offset of the <foreignObject> element,
+    // but PaintLayer::HitTestLayer assumes it has not been.
+    point_in_foreign_object.MoveBy(-Layer()->LayoutBoxLocation());
     HitTestResult layer_result(result.GetHitTestRequest(),
-                               LayoutPoint(local_point));
+                               point_in_foreign_object);
     bool retval = Layer()->HitTest(layer_result);
     result = layer_result;
     return retval;
diff --git a/third_party/blink/renderer/core/layout/svg/layout_svg_foreign_object_test.cc b/third_party/blink/renderer/core/layout/svg/layout_svg_foreign_object_test.cc
index f65f050..f591878 100644
--- a/third_party/blink/renderer/core/layout/svg/layout_svg_foreign_object_test.cc
+++ b/third_party/blink/renderer/core/layout/svg/layout_svg_foreign_object_test.cc
@@ -256,4 +256,58 @@
   EXPECT_EQ(svg, GetDocument().ElementFromPoint(400, 400));
 }
 
+TEST_F(LayoutSVGForeignObjectTest,
+       HitTestUnderClippedPositionedForeignObjectDescendant) {
+  SetBodyInnerHTML(R"HTML(
+    <style>
+      * {
+        margin: 0
+      }
+    </style>
+    <svg id="svg" style="width: 600px; height: 600px">
+      <foreignObject id="foreignObject" x="200" y="200" width="100"
+          height="100">
+        <div id="target" style="overflow: hidden; position: relative;
+            width: 100px; height: 50px; left: 5px"></div>
+      </foreignObject>
+    </svg>
+  )HTML");
+
+  const auto& svg = *GetDocument().getElementById("svg");
+  const auto& target = *GetDocument().getElementById("target");
+  const auto& foreignObject = *GetDocument().getElementById("foreignObject");
+
+  EXPECT_EQ(svg, GetDocument().ElementFromPoint(1, 1));
+  EXPECT_EQ(foreignObject, GetDocument().ElementFromPoint(201, 201));
+  EXPECT_EQ(target, GetDocument().ElementFromPoint(206, 206));
+  EXPECT_EQ(foreignObject, GetDocument().ElementFromPoint(205, 255));
+}
+
+TEST_F(LayoutSVGForeignObjectTest,
+       HitTestUnderTransformedForeignObjectDescendant) {
+  SetBodyInnerHTML(R"HTML(
+    <style>
+      * {
+        margin: 0
+      }
+    </style>
+    <svg id="svg" style="width: 600px; height: 600px">
+      <foreignObject id="foreignObject" x="200" y="200" width="100"
+          height="100" transform="translate(30)">
+        <div id="target" style="overflow: hidden; position: relative;
+            width: 100px; height: 50px; left: 5px"></div>
+      </foreignObject>
+    </svg>
+  )HTML");
+
+  const auto& svg = *GetDocument().getElementById("svg");
+  const auto& target = *GetDocument().getElementById("target");
+  const auto& foreignObject = *GetDocument().getElementById("foreignObject");
+
+  EXPECT_EQ(svg, GetDocument().ElementFromPoint(1, 1));
+  EXPECT_EQ(foreignObject, GetDocument().ElementFromPoint(231, 201));
+  EXPECT_EQ(target, GetDocument().ElementFromPoint(236, 206));
+  EXPECT_EQ(foreignObject, GetDocument().ElementFromPoint(235, 255));
+}
+
 }  // namespace blink
diff --git a/third_party/blink/renderer/core/paint/paint_layer.cc b/third_party/blink/renderer/core/paint/paint_layer.cc
index c525c96..e537bf4 100644
--- a/third_party/blink/renderer/core/paint/paint_layer.cc
+++ b/third_party/blink/renderer/core/paint/paint_layer.cc
@@ -1854,16 +1854,6 @@
     ConvertToLayerCoords(root_layer, offset);
   }
   offset.MoveBy(translation_offset);
-  // The location of a foreignObject element is added *after* transform, not
-  // before (all SVG child elements have this behavior). Therefore, remove
-  // the offset here to avoid applying it before the transform. It will be
-  // added later.
-  // TODO(chrishtr): this ugliness can be removed if we change the code to
-  // to be based on PaintOffset rather than PaintLayer offsets, like the
-  // paint code does. This is a larger effort though, that involves using
-  // property trees to drive hit testing coordinate spaces.
-  if (GetLayoutObject().IsSVGForeignObject())
-    offset.MoveBy(-LayoutBoxLocation());
 
   LayoutObject* container_layout_object =
       container_layer ? &container_layer->GetLayoutObject() : nullptr;
@@ -1941,7 +1931,11 @@
   if (result.GetHitTestRequest().IgnoreClipping())
     clip_behavior = kIgnoreOverflowClip;
 
-  bool use_transform = Transform();
+  // We can only reach an SVG foreign object's PaintLayer from
+  // LayoutSVGForeignObject::NodeAtFloatPoint (because
+  // IsReplacedNormalFlowStacking() true for LayoutSVGForeignObject),
+  // where the hit_test_rect has already been transformed to local coordinates.
+  bool use_transform = Transform() && !GetLayoutObject().IsSVGForeignObject();
 
   // Apply a transform if we have one.
   if (use_transform && !applied_transform) {
@@ -2081,10 +2075,6 @@
   }
 
   LayoutPoint offset = -LayoutBoxLocation();
-  // See comment in CreateLocalTransformState. The code here is
-  // where we re-add the location.
-  if (root_layer->GetLayoutObject().IsSVGForeignObject())
-    offset.MoveBy(root_layer->LayoutBoxLocation());
 
   // Next we want to see if the mouse pos is inside the child LayoutObjects of
   // the layer. Check every fragment in reverse order.
--- a/chrome/VERSION
+++ b/chrome/VERSION
@@ -1,4 +1,4 @@
 MAJOR=69
 MINOR=0
 BUILD=3447
-PATCH=0
+PATCH=3

