diff --git a/components/policy/core/common/BUILD.gn b/components/policy/core/common/BUILD.gn
index 632cfccf..e7b756e 100644
--- a/components/policy/core/common/BUILD.gn
+++ b/components/policy/core/common/BUILD.gn
@@ -46,6 +46,8 @@
     "cloud/cloud_policy_service.h",
     "cloud/cloud_policy_store.cc",
     "cloud/cloud_policy_store.h",
+    "cloud/cloud_policy_util.cc",
+    "cloud/cloud_policy_util.h",
     "cloud/cloud_policy_validator.cc",
     "cloud/cloud_policy_validator.h",
     "cloud/component_cloud_policy_service.cc",
diff --git a/components/policy/core/common/cloud/cloud_policy_client.cc b/components/policy/core/common/cloud/cloud_policy_client.cc
index 062cdd3..437d594 100644
--- a/components/policy/core/common/cloud/cloud_policy_client.cc
+++ b/components/policy/core/common/cloud/cloud_policy_client.cc
@@ -4,6 +4,8 @@
 
 #include "components/policy/core/common/cloud/cloud_policy_client.h"
 
+#include "build/build_config.h"
+
 #include <utility>
 
 #include "base/bind.h"
@@ -12,6 +14,7 @@
 #include "base/guid.h"
 #include "base/logging.h"
 #include "base/stl_util.h"
+#include "components/policy/core/common/cloud/cloud_policy_util.h"
 #include "components/policy/core/common/cloud/device_management_service.h"
 #include "components/policy/core/common/cloud/signing_service.h"
 #include "google_apis/gaia/gaia_constants.h"
@@ -42,7 +45,8 @@
 
 bool IsChromePolicy(const std::string& type) {
   return type == dm_protocol::kChromeDevicePolicyType ||
-         type == dm_protocol::kChromeUserPolicyType;
+         type == dm_protocol::kChromeUserPolicyType ||
+         type == dm_protocol::kChromeMachineLevelUserCloudPolicyType;
 }
 
 LicenseType TranslateLicenseType(em::LicenseType type) {
@@ -225,6 +229,33 @@
                  weak_ptr_factory_.GetWeakPtr()));
 }
 
+void CloudPolicyClient::RegisterWithToken(const std::string& token,
+                                          const std::string& client_id) {
+  DCHECK(service_);
+  DCHECK(!token.empty());
+  DCHECK(!client_id.empty());
+  DCHECK(!is_registered());
+
+  SetClientId(client_id);
+
+  policy_fetch_request_job_.reset(service_->CreateJob(
+      DeviceManagementRequestJob::TYPE_TOKEN_ENROLLMENT, GetRequestContext()));
+  policy_fetch_request_job_->SetEnrollmentToken(token);
+  policy_fetch_request_job_->SetClientID(client_id_);
+
+  enterprise_management::RegisterBrowserRequest* request =
+      policy_fetch_request_job_->GetRequest()
+          ->mutable_register_browser_request();
+  request->set_machine_name(GetMachineName());
+
+  policy_fetch_request_job_->SetRetryCallback(base::Bind(
+      &CloudPolicyClient::OnRetryRegister, weak_ptr_factory_.GetWeakPtr()));
+
+  policy_fetch_request_job_->Start(
+      base::Bind(&CloudPolicyClient::OnRegisterCompleted,
+                 weak_ptr_factory_.GetWeakPtr()));
+}
+
 void CloudPolicyClient::OnRegisterWithCertificateRequestSigned(bool success,
     em::SignedData signed_data) {
   if (!success) {
@@ -401,6 +432,28 @@
   request_jobs_.back()->Start(job_callback);
 }
 
+void CloudPolicyClient::UploadChromeDesktopReport(
+    const em::ChromeDesktopReportRequest& chrome_desktop_report,
+    const CloudPolicyClient::StatusCallback& callback) {
+  CHECK(is_registered());
+  std::unique_ptr<DeviceManagementRequestJob> request_job(service_->CreateJob(
+      DeviceManagementRequestJob::TYPE_CHROME_DESKTOP_REPORT,
+      GetRequestContext()));
+
+  request_job->SetDMToken(dm_token_);
+  request_job->SetClientID(client_id_);
+
+  em::DeviceManagementRequest* request = request_job->GetRequest();
+  *request->mutable_chrome_desktop_report_request() = chrome_desktop_report;
+
+  const DeviceManagementRequestJob::Callback job_callback =
+      base::Bind(&CloudPolicyClient::OnReportUploadCompleted,
+                 weak_ptr_factory_.GetWeakPtr(), request_job.get(), callback);
+
+  request_jobs_.push_back(std::move(request_job));
+  request_jobs_.back()->Start(job_callback);
+}
+
 void CloudPolicyClient::UploadAppInstallReport(
     const em::AppInstallReportRequest* app_install_report,
     const StatusCallback& callback) {
diff --git a/components/policy/core/common/cloud/cloud_policy_client.h b/components/policy/core/common/cloud/cloud_policy_client.h
index 9829a96..1482314 100644
--- a/components/policy/core/common/cloud/cloud_policy_client.h
+++ b/components/policy/core/common/cloud/cloud_policy_client.h
@@ -17,6 +17,7 @@
 #include "base/callback.h"
 #include "base/macros.h"
 #include "base/observer_list.h"
+#include "base/optional.h"
 #include "base/time/time.h"
 #include "components/policy/core/common/cloud/cloud_policy_constants.h"
 #include "components/policy/core/common/remote_commands/remote_command_job.h"
@@ -144,6 +145,11 @@
       const std::string& requisition,
       const std::string& current_state_key);
 
+  // Attempts to enroll with the device management service using an enrollment
+  // token. Results in a registration change or error notification.
+  virtual void RegisterWithToken(const std::string& token,
+                                 const std::string& client_id);
+
   // Sets information about a policy invalidation. Subsequent fetch operations
   // will use the given info, and callers can use fetched_invalidation_version
   // to determine which version of policy was fetched.
@@ -191,6 +197,14 @@
       const enterprise_management::SessionStatusReportRequest* session_status,
       const StatusCallback& callback);
 
+  // Uploads Chrome Desktop report to the server. As above, the client must be
+  // in a registered state. |chrome_desktop_report| will be included in the
+  // upload request. The |callback| will be called when the operation completes.
+  virtual void UploadChromeDesktopReport(
+      const enterprise_management::ChromeDesktopReportRequest&
+          chrome_desktop_report,
+      const StatusCallback& callback);
+
   // Uploads a report on the status of app push-installs. The client must be in
   // a registered state. The |callback| will be called when the operation
   // completes.
diff --git a/components/policy/core/common/cloud/cloud_policy_client_registration_helper.cc b/components/policy/core/common/cloud/cloud_policy_client_registration_helper.cc
index 1c885bf..5d7ce35 100644
--- a/components/policy/core/common/cloud/cloud_policy_client_registration_helper.cc
+++ b/components/policy/core/common/cloud/cloud_policy_client_registration_helper.cc
@@ -184,6 +184,17 @@
                  base::Unretained(this)));
 }
 
+void CloudPolicyClientRegistrationHelper::StartRegistrationWithEnrollmentToken(
+    const std::string& token,
+    const std::string& client_id,
+    const base::Closure& callback) {
+  DVLOG(1) << "Starting registration process with enrollment token";
+  DCHECK(!client_->is_registered());
+  callback_ = callback;
+  client_->AddObserver(this);
+  client_->RegisterWithToken(token, client_id);
+}
+
 #if !defined(OS_ANDROID)
 void CloudPolicyClientRegistrationHelper::StartRegistrationWithLoginToken(
     const std::string& login_refresh_token,
diff --git a/components/policy/core/common/cloud/cloud_policy_client_registration_helper.h b/components/policy/core/common/cloud/cloud_policy_client_registration_helper.h
index 59a894a..517c35d 100644
--- a/components/policy/core/common/cloud/cloud_policy_client_registration_helper.h
+++ b/components/policy/core/common/cloud/cloud_policy_client_registration_helper.h
@@ -49,6 +49,12 @@
       const std::string& account_id,
       const base::Closure& callback);
 
+  // Starts the device registration with an token enrollment process.
+  // |callback| is invoked when the registration is complete.
+  void StartRegistrationWithEnrollmentToken(const std::string& token,
+                                            const std::string& client_id,
+                                            const base::Closure& callback);
+
 #if !defined(OS_ANDROID)
   // Starts the client registration process. The |login_refresh_token| is used
   // to mint a new token for the userinfo and DM services.
diff --git a/components/policy/core/common/cloud/cloud_policy_client_unittest.cc b/components/policy/core/common/cloud/cloud_policy_client_unittest.cc
index 59dad76..667c249 100644
--- a/components/policy/core/common/cloud/cloud_policy_client_unittest.cc
+++ b/components/policy/core/common/cloud/cloud_policy_client_unittest.cc
@@ -17,6 +17,8 @@
 #include "base/macros.h"
 #include "base/memory/ref_counted.h"
 #include "base/message_loop/message_loop.h"
+#include "build/build_config.h"
+#include "components/policy/core/common/cloud/cloud_policy_util.h"
 #include "components/policy/core/common/cloud/mock_cloud_policy_client.h"
 #include "components/policy/core/common/cloud/mock_device_management_service.h"
 #include "components/policy/core/common/cloud/mock_signing_service.h"
@@ -55,6 +57,12 @@
 const char kLocation[] = "fake-location";
 const char kGcmID[] = "fake-gcm-id";
 const char kPackageName[] = "com.example.app";
+
+#if defined(OS_WIN) || defined(OS_MACOSX) || \
+    defined(OS_LINUX) && !defined(OS_CHROMEOS)
+const char kEnrollmentToken[] = "enrollment_token";
+#endif
+
 const int64_t kAgeOfCommand = 123123123;
 const int64_t kLastCommandId = 123456789;
 const int64_t kTimestamp = 987654321;
@@ -148,6 +156,13 @@
     registration_response_.mutable_register_response()->
         set_device_management_token(kDMToken);
 
+#if defined(OS_WIN) || defined(OS_MACOSX) || \
+    defined(OS_LINUX) && !defined(OS_CHROMEOS)
+    em::RegisterBrowserRequest* enrollment_request =
+        enrollment_token_request_.mutable_register_browser_request();
+    enrollment_request->set_machine_name(policy::GetMachineName());
+#endif
+
     unregistration_request_.mutable_unregister_request();
     unregistration_response_.mutable_unregister_response();
     upload_machine_certificate_request_.mutable_cert_upload_request()
@@ -165,6 +180,8 @@
     upload_status_request_.mutable_device_status_report_request();
     upload_status_request_.mutable_session_status_report_request();
 
+    chrome_desktop_report_request_.mutable_chrome_desktop_report_request();
+
     remote_command_request_.mutable_remote_command_request()
         ->set_last_command_unique_id(kLastCommandId);
     em::RemoteCommandResult* command_result =
@@ -279,6 +296,17 @@
         .WillOnce(SaveArg<4>(&client_id_));
   }
 
+  void ExpectEnrollmentTokenBasedRegistration() {
+    EXPECT_CALL(service_,
+                CreateJob(DeviceManagementRequestJob::TYPE_TOKEN_ENROLLMENT,
+                          request_context_))
+        .WillOnce(service_.SucceedJob(registration_response_));
+    EXPECT_CALL(service_, StartJob(dm_protocol::kValueRequestTokenEnrollment,
+                                   std::string(), std::string(), std::string(),
+                                   _, MatchProto(enrollment_token_request_)))
+        .WillOnce(SaveArg<4>(&client_id_));
+  }
+
   void ExpectPolicyFetch(const std::string& dm_token) {
     EXPECT_CALL(service_,
                 CreateJob(DeviceManagementRequestJob::TYPE_POLICY_FETCH,
@@ -322,6 +350,18 @@
                          client_id_, MatchProto(upload_status_request_)));
   }
 
+  void ExpectChromeDesktopReport() {
+    EXPECT_CALL(
+        service_,
+        CreateJob(DeviceManagementRequestJob::TYPE_CHROME_DESKTOP_REPORT,
+                  request_context_))
+        .WillOnce(service_.SucceedJob(chrome_desktop_report_response_));
+    EXPECT_CALL(service_,
+                StartJob(dm_protocol::kValueRequestChromeDesktopReport,
+                         std::string(), std::string(), kDMToken, client_id_,
+                         MatchProto(chrome_desktop_report_request_)));
+  }
+
   void ExpectFetchRemoteCommands() {
     EXPECT_CALL(service_,
                 CreateJob(DeviceManagementRequestJob::TYPE_REMOTE_COMMANDS,
@@ -418,11 +458,13 @@
   // Request protobufs used as expectations for the client requests.
   em::DeviceManagementRequest registration_request_;
   em::DeviceManagementRequest cert_based_registration_request_;
+  em::DeviceManagementRequest enrollment_token_request_;
   em::DeviceManagementRequest policy_request_;
   em::DeviceManagementRequest unregistration_request_;
   em::DeviceManagementRequest upload_machine_certificate_request_;
   em::DeviceManagementRequest upload_enrollment_certificate_request_;
   em::DeviceManagementRequest upload_status_request_;
+  em::DeviceManagementRequest chrome_desktop_report_request_;
   em::DeviceManagementRequest remote_command_request_;
   em::DeviceManagementRequest attribute_update_permission_request_;
   em::DeviceManagementRequest attribute_update_request_;
@@ -435,6 +477,7 @@
   em::DeviceManagementResponse unregistration_response_;
   em::DeviceManagementResponse upload_certificate_response_;
   em::DeviceManagementResponse upload_status_response_;
+  em::DeviceManagementResponse chrome_desktop_report_response_;
   em::DeviceManagementResponse remote_command_response_;
   em::DeviceManagementResponse attribute_update_permission_response_;
   em::DeviceManagementResponse attribute_update_response_;
@@ -481,6 +524,26 @@
   CheckPolicyResponse();
 }
 
+#if defined(OS_WIN) || defined(OS_MACOSX) || \
+    defined(OS_LINUX) && !defined(OS_CHROMEOS)
+TEST_F(CloudPolicyClientTest, RegistrationWithTokenAndPolicyFetch) {
+  ExpectEnrollmentTokenBasedRegistration();
+  EXPECT_CALL(observer_, OnRegistrationStateChanged(_));
+  EXPECT_CALL(device_dmtoken_callback_observer_, OnDeviceDMTokenRequested(_))
+      .WillOnce(Return(kDeviceDMToken));
+  client_->RegisterWithToken(kEnrollmentToken, "device_id");
+  EXPECT_TRUE(client_->is_registered());
+  EXPECT_FALSE(client_->GetPolicyFor(policy_type_, std::string()));
+  EXPECT_EQ(DM_STATUS_SUCCESS, client_->status());
+
+  ExpectPolicyFetch(kDMToken);
+  EXPECT_CALL(observer_, OnPolicyFetched(_));
+  client_->FetchPolicy();
+  EXPECT_EQ(DM_STATUS_SUCCESS, client_->status());
+  CheckPolicyResponse();
+}
+#endif
+
 TEST_F(CloudPolicyClientTest, RegistrationAndPolicyFetch) {
   ExpectRegistration(kOAuthToken);
   EXPECT_CALL(observer_, OnRegistrationStateChanged(_));
@@ -949,6 +1012,19 @@
   EXPECT_EQ(DM_STATUS_SUCCESS, client_->status());
 }
 
+TEST_F(CloudPolicyClientTest, UploadChromeDesktopReport) {
+  Register();
+
+  ExpectChromeDesktopReport();
+  EXPECT_CALL(callback_observer_, OnCallbackComplete(true)).Times(1);
+  CloudPolicyClient::StatusCallback callback =
+      base::Bind(&MockStatusCallbackObserver::OnCallbackComplete,
+                 base::Unretained(&callback_observer_));
+  em::ChromeDesktopReportRequest chrome_desktop_report;
+  client_->UploadChromeDesktopReport(chrome_desktop_report, callback);
+  EXPECT_EQ(DM_STATUS_SUCCESS, client_->status());
+}
+
 TEST_F(CloudPolicyClientTest, MultipleActiveRequests) {
   Register();
 
diff --git a/components/policy/core/common/cloud/cloud_policy_service.cc b/components/policy/core/common/cloud/cloud_policy_service.cc
index 0576c3b..46f9d9f 100644
--- a/components/policy/core/common/cloud/cloud_policy_service.cc
+++ b/components/policy/core/common/cloud/cloud_policy_service.cc
@@ -123,6 +123,7 @@
   if (!policy_timestamp.is_null() && !old_timestamp.is_null() &&
       policy_timestamp != old_timestamp) {
     const base::TimeDelta age = policy_timestamp - old_timestamp;
+    // TODO(zmin): add UMA for new policy type.
     if (policy_type_ == dm_protocol::kChromeUserPolicyType) {
       UMA_HISTOGRAM_CUSTOM_COUNTS("Enterprise.PolicyUpdatePeriod.User",
                                   age.InDays(), 1, 1000, 100);
diff --git a/components/policy/core/common/cloud/cloud_policy_util.cc b/components/policy/core/common/cloud/cloud_policy_util.cc
new file mode 100644
index 0000000..b0d758c
--- /dev/null
+++ b/components/policy/core/common/cloud/cloud_policy_util.cc
@@ -0,0 +1,81 @@
+// Copyright (c) 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "components/policy/core/common/cloud/cloud_policy_util.h"
+
+#include "build/build_config.h"
+
+#if defined(OS_WIN)
+#include <Windows.h>  // For GetComputerNameW()
+#endif
+
+#if defined(OS_MACOSX)
+#import <SystemConfiguration/SCDynamicStoreCopySpecific.h>
+#include <stddef.h>
+#include <sys/sysctl.h>
+#endif
+
+#include <utility>
+
+#include "base/strings/utf_string_conversions.h"
+
+#if defined(OS_MACOSX)
+#include "base/mac/scoped_cftyperef.h"
+#include "base/strings/string_util.h"
+#include "base/strings/sys_string_conversions.h"
+#endif
+
+namespace policy {
+
+std::string GetMachineName() {
+#if defined(OS_LINUX) && !defined(OS_CHROMEOS)
+  char hostname[HOST_NAME_MAX];
+  if (gethostname(hostname, HOST_NAME_MAX) == 0)  // Success.
+    return hostname;
+  return std::string();
+#elif defined(OS_MACOSX)
+  // Do not use NSHost currentHost, as it's very slow. http://crbug.com/138570
+  SCDynamicStoreContext context = {0, NULL, NULL, NULL};
+  base::ScopedCFTypeRef<SCDynamicStoreRef> store(SCDynamicStoreCreate(
+      kCFAllocatorDefault, CFSTR("chrome_sync"), NULL, &context));
+  base::ScopedCFTypeRef<CFStringRef> machine_name(
+      SCDynamicStoreCopyLocalHostName(store.get()));
+  if (machine_name.get())
+    return base::SysCFStringRefToUTF8(machine_name.get());
+
+  // Fall back to get computer name.
+  base::ScopedCFTypeRef<CFStringRef> computer_name(
+      SCDynamicStoreCopyComputerName(store.get(), NULL));
+  if (computer_name.get())
+    return base::SysCFStringRefToUTF8(computer_name.get());
+
+  // If all else fails, return to using a slightly nicer version of the
+  // hardware model.
+  char modelBuffer[256];
+  size_t length = sizeof(modelBuffer);
+  if (!sysctlbyname("hw.model", modelBuffer, &length, NULL, 0)) {
+    for (size_t i = 0; i < length; i++) {
+      if (base::IsAsciiDigit(modelBuffer[i]))
+        return std::string(modelBuffer, 0, i);
+    }
+    return std::string(modelBuffer, 0, length);
+  }
+  return std::string();
+#elif defined(OS_WIN)
+  wchar_t computer_name[MAX_COMPUTERNAME_LENGTH + 1] = {0};
+  DWORD size = arraysize(computer_name);
+  if (::GetComputerNameW(computer_name, &size)) {
+    std::string result;
+    bool conversion_successful = base::WideToUTF8(computer_name, size, &result);
+    DCHECK(conversion_successful);
+    return result;
+  }
+  return std::string();
+#else
+  NOTREACHED();
+  return std::string();
+#endif
+}
+
+}  // namespace policy
diff --git a/components/policy/core/common/cloud/cloud_policy_util.h b/components/policy/core/common/cloud/cloud_policy_util.h
new file mode 100644
index 0000000..52a94d7
--- /dev/null
+++ b/components/policy/core/common/cloud/cloud_policy_util.h
@@ -0,0 +1,19 @@
+// Copyright (c) 2018 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef COMPONENTS_POLICY_CORE_COMMON_CLOUD_CLOUD_POLICY_UTIL_H_
+#define COMPONENTS_POLICY_CORE_COMMON_CLOUD_CLOUD_POLICY_UTIL_H_
+
+#include <string>
+
+#include "components/policy/policy_export.h"
+
+namespace policy {
+
+// Returns the name of the machine.  This function is platform specific.
+POLICY_EXPORT std::string GetMachineName();
+
+}  // namespace policy
+
+#endif  // COMPONENTS_POLICY_CORE_COMMON_CLOUD_CLOUD_POLICY_UTIL_H_
